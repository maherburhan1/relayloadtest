syntax = "proto3";

package msp.relay;
option java_package = "com.solarwinds.msp.relay";

import "google/protobuf/any.proto";

service Publisher {
    // Publishes an event.
    // Common errors generated by server conditions:
    // INTERNAL - An internal error occurred, preventing the events from being relayed.
    //    
    // Likely a problem publishing the events to the event bus.
    // UNAUTHENTICATED - The token provided with this customer does not have authority to publish
    // UNAVAILABLE - The service is not available, possibly because it is temporarily overloaded
    rpc Publish (PublishRequest) returns (PublishResponse);
}

service Entitlement {

    rpc Verify(EntitlementRequest) returns (EntitlementResponse);
}

message EntitlementRequest {
    //Business application ID assigned to the specific partner.
    string bizapps_customer_id = 1;
    string ncentral_id = 2;
}

message EntitlementResponse {
    bool relay = 1;
}

message Context {
    //Business application ID assigned to the specific partner.
    string bizapps_customer_id = 1;
    //A GUID unique to the installation of the MSP product. Used to differentiate between various N-central installations.
    string system_guid = 2;
}

// Event publication message.
message RequestMessage {
    // The name of the event type in the payload.
    string event_type = 1;

    // An ID for this message, unique within the batch
    int32 id = 2;

    // The payload to be published specified as some Protocol Buffer message.
    // The schema of Protocol buffer schema of the message must be registered prior to publication.
    google.protobuf.Any payload = 3;
}

// Event publication request, containing a batch of messages
message PublishRequest {
    // What the messages relate to - the partner and system they're from.
    Context context = 1;

    // The batch of messages containing the events to relay
    repeated RequestMessage messages = 2;
}

// Event publication response for an individual message.
message ResponseMessage {
    enum ResponseStatus {
        PUBLISH_ERROR = 0;
        OK = 1;
    }

    // The unique identifier of the published payload, guaranteed to be unique.
    ResponseStatus status = 1;

    // The ID from the corresponding request message.
    int32 id = 2;
}

// Event publication response, containing a batch of response messages.
message PublishResponse {
    // The batch responses.
    repeated ResponseMessage responseMessages = 1;
}